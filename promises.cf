bundle agent enc {

  vars:
    henc_has_list::
      "encfile"      string => "$(def.topdir)/enc/${sys.uqhost}";

  classes:
      "henc_has_file" expression => isvariable("encfile") ;

  commands:
    !henc_classes_activated::
      "$(def.topdir)/enc/enc.sh"
        comment    => "Hierarchical classification for $(sys.fqhost)",
        #args       => "$(encfile)",
        args       => "$(def.topdir)/enc/debianbase",
        classes    => always("henc_classes_activated"),
        module     => "true" ;

  reports:
    linux::
      "$(encfile) porcodio";
}

bundle common classify {

  # This section classifies hosts instances into roles based on the hostname
  # I use a completely virtualized infrastructure with hostnames determined by
  # on a role specific prefix and a hex string separated by an underscore.
  # The hex string is the last 3 bytes of the MAC address of the lowest
  # numbered interface (e.g., eth0). Instances are created this way by my
  # provisioning system.

  classes:

    "dns_ns"        or => { classmatch("ns[0-9]*") };
    # Roles choose application bundles
    "bind"          expression => "dns_ns|dns_forwarder";

}

bundle common inventory {

  vars:

    (cfengine_3_6).debian::
      "bundles[inventory_autorun]"     string => "inventory/inventory_any.cf";
      "bundles[inventory_lsb]"     string => "inventory/inventory_lsb.cf";
      "bundles[inventory_debian]"     string => "inventory/inventory_debian.cf";

    any::
      "sequence"  slist => getindices("bundles");
      "inputs"    slist => getvalues("bundles");
}

bundle common g {

  # This section assigns bundles to application/role/grouping classes.
  # An array is created, named **bundles**. Each *key* is named after
  # a *bundle*. The *value* of each key is the input file where that
  # bundle can be found.

  vars:

    cfengine_3_6.NeverEnabled::
      "libinputs" slist => {
                    "lib/3.6/paths.cf",
                    "lib/3.6/common.cf",
                    "lib/3.6/commands.cf",
                    "lib/3.6/packages.cf",
                    "lib/3.6/files.cf",
                    "lib/3.6/services.cf",
                    "lib/3.6/processes.cf",
                    "lib/3.6/storage.cf",
                    "lib/3.6/databases.cf",
                    "lib/3.6/users.cf",
                    "lib/3.6/monitor.cf",
                    "lib/3.6/guest_environments.cf",
                    "lib/3.6/bundles.cf",
                    "lib/3.6/reports.cf",
      };

    cfengine_3_6::
      "libinputs" slist => { "$(def.topdir)/lib/3.6/stdlib.cf" };


    # These classes were defined by me in the classify bundle
    bind::
      "bundles[bind]"       string => "bind.cf";

    postgresql::
      "bundles[postgresql]"      string => "postgresql.cf";

    ssl::
      "bundles[ssl]"        string => "ssl.cf";

    stunnel::
      "bundles[stunnel]"    string => "stunnel.cf";

    # Thse are hard classes determined by cfengine. I don't need to explicitly
    # classify them.
    debian::
      "bundles[base:base_init]"       string => "modules/base/init.cf";
      #"bundles[debian]"     string => "debian.cf";

    # Now the magic.
    # I create two slists. One named "sequence" and one named "inputs".
    # The "sequence" slist contains a list of bundle names.
    # The "inputs" slist contains a list of input files.
    any::
      "sequence"  slist => getindices("bundles");
      "inputs"    slist => getvalues("bundles");

}

body common control {

  # The bundlesequence now includes those things which are common to all, plus
  # the contents of the slist "sequence" (which has ben dynamically generated),
  # plus the unqualified hostname.
  #bundlesequence => { "global", "main", "@{inventory.sequence}", "@{g.sequence}", "${sys.uqhost}"};
  bundlesequence => { "enc", "@{inventory.sequence}", "@{g.sequence}", "${sys.uqhost}"};

  # The inputs now includes common libraries and main.cf which will be run by
  # all systems, plus the contents of the slist "inputs" (which has been
  # dynamically) generated, plus an input based on the unqualified hostname.
  #inputs => { "cfengine_stdlib.cf", "main.cf", "@{g.inputs}", "${sys.uqhost}.cf" };

  inputs => {

            # File definition for global variables and classes
            "def.cf",

            # Cfengine StdLib
            @(g.libinputs),

            # Inventory policy
            @(inventory.inputs),

            # g policy
            @(g.inputs),

  };



  # Sometimes I need to have any specific configuration for a single host (e.g.,
  # one of dns_ns will be the master and the rest will be slaves so the master
  # needs special configuration). The following options will allow cfengine to
  # skip the hostname bundle/input if one does not exist (which it usually
  # doesn't).
  ignore_missing_bundles => "true";
  ignore_missing_inputs  => "true";

  version => "Prz CFSolo Promises.cf 0.0.1";
}
